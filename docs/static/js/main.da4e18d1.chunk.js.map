{"version":3,"sources":["components/Pokemon.js","components/PokeList.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","react_default","a","createElement","className","this","props","pokemon","types","map","type","i","key","Component","PokeList","pokemons","src","url","alt","name","components_Pokemon","id","evolution","App","components_PokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAceA,mLAVX,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACXC,KAAKC,MAAMC,QAAQC,MAAMC,IAAI,SAACC,EAAMC,GACnC,OAAOV,EAAAC,EAAAC,cAAA,MAAIS,IAAKD,GAAID,aALRG,aCsBPC,mLAnBX,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,UACGE,KAAKC,MAAMS,SAASN,IAAI,SAACF,EAASI,GACjC,OACEV,EAAAC,EAAAC,cAAA,MAAIS,IAAKD,GACPV,EAAAC,EAAAC,cAAA,OAAKa,IAAKT,EAAQU,IAAKC,IAAKX,EAAQY,OACpClB,EAAAC,EAAAC,cAAA,UAAKI,EAAQY,MACblB,EAAAC,EAAAC,cAACiB,EAAD,CAASb,QAASA,gBAXXM,aCCjBE,SAAW,CACf,CAACM,GAAK,EAAEF,KAAO,YAAYX,MAAQ,CAAC,SAAS,SAASc,UAAY,KAAKL,IAAM,kFAC7E,CAACI,GAAK,EAAEF,KAAO,UAAUX,MAAQ,CAAC,SAAS,SAASc,UAAY,YAAYL,IAAM,kFAClF,CAACI,GAAK,EAAEF,KAAO,WAAWX,MAAQ,CAAC,SAAS,SAASc,UAAY,UAAUL,IAAM,kFACjF,CAACI,GAAK,EAAEF,KAAO,aAAaX,MAAQ,CAAC,QAAQc,UAAY,KAAKL,IAAM,kFACpE,CAACI,GAAK,EAAEF,KAAO,aAAaX,MAAQ,CAAC,QAAQc,UAAY,aAAaL,IAAM,kFAC5E,CAACI,GAAK,EAAEF,KAAO,YAAYX,MAAQ,CAAC,SAAS,QAAQc,UAAY,aAAaL,IAAM,kFACpF,CAACI,GAAK,EAAEF,KAAO,WAAWX,MAAQ,CAAC,SAASc,UAAY,KAAKL,IAAM,kFACnE,CAACI,GAAK,EAAEF,KAAO,YAAYX,MAAQ,CAAC,SAASc,UAAY,WAAWL,IAAM,kFAC1E,CAACI,GAAK,EAAEF,KAAO,YAAYX,MAAQ,CAAC,SAASc,UAAY,YAAYL,IAAM,kFAC3E,CAACI,GAAK,GAAGF,KAAO,WAAWX,MAAQ,CAAC,OAAOc,UAAY,KAAKL,IAAM,qFAWrDM,mLANX,OACCtB,EAAAC,EAAAC,cAACqB,EAAD,CAAUT,SAAUA,WAHPF,aCLEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.da4e18d1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Pokemon extends Component {\n  render() {\n    return (\n      <ul className=\"type\">\n        {this.props.pokemon.types.map((type, i) => {\n          return <li key={i}>{type}</li>;\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default Pokemon;\n","import React, { Component } from \"react\";\nimport Pokemon from \"./Pokemon\";\n\nclass PokeList extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Mi lista de pokemon</h1>\n        <ul>\n          {this.props.pokemons.map((pokemon, i) => {\n            return (\n              <li key={i}>\n                <img src={pokemon.url} alt={pokemon.name} />\n                <h2>{pokemon.name}</h2>\n                <Pokemon pokemon={pokemon} />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default PokeList;\n","import React, { Component } from 'react';\nimport PokeList from './components/PokeList';\nimport './App.css';\n\nconst pokemons = [\n  {\"id\":1,\"name\":\"bulbasaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\"},\n  {\"id\":2,\"name\":\"ivysaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":\"bulbasaur\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png\"},\n  {\"id\":3,\"name\":\"venusaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":\"ivysaur\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png\"},\n  {\"id\":4,\"name\":\"charmander\",\"types\":[\"fire\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png\"},\n  {\"id\":5,\"name\":\"charmeleon\",\"types\":[\"fire\"],\"evolution\":\"charmander\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png\"},\n  {\"id\":6,\"name\":\"charizard\",\"types\":[\"flying\",\"fire\"],\"evolution\":\"charmeleon\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png\"},\n  {\"id\":7,\"name\":\"squirtle\",\"types\":[\"water\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png\"},\n  {\"id\":8,\"name\":\"wartortle\",\"types\":[\"water\"],\"evolution\":\"squirtle\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png\"},\n  {\"id\":9,\"name\":\"blastoise\",\"types\":[\"water\"],\"evolution\":\"wartortle\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png\"},\n  {\"id\":10,\"name\":\"caterpie\",\"types\":[\"bug\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png\"}\n];\n\nclass App extends Component {\n  render() {\n    return (\n     <PokeList pokemons={pokemons}/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}